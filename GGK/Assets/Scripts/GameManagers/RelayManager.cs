using System.Collections;
using System.Collections.Generic;
using TMPro;
using Unity.Netcode;
using Unity.Netcode.Transports.UTP;
using Unity.Services.Authentication;
using Unity.Services.Core;
using Unity.Services.Relay;
using Unity.Services.Relay.Models;
using UnityEngine;
using UnityEngine.UI;
using System.Threading.Tasks;
using System;

/// <summary>
/// RelayManager Class by Phillip Brown
/// </summary>
public class RelayManager : MonoBehaviour
{
    public static RelayManager Instance { get; private set; }

    public event EventHandler OnRelayStarted;

    private void Awake()
    {
        Instance = this;
    }

    /// <summary>
    /// Creates a relay and returns the code assoiated to the relay
    /// </summary>
    /// <returns>string code for other client's JoinRelay function</returns>
    public async Task<string> CreateRelay()
    {
        try
        {
            Allocation allocation = await RelayService.Instance.CreateAllocationAsync(3);
            string joinCode = await RelayService.Instance.GetJoinCodeAsync(allocation.AllocationId);
            //codePanel.text = joinCode;
            Debug.Log(joinCode);

            NetworkManager.Singleton.GetComponent<UnityTransport>().SetHostRelayData(
                allocation.RelayServer.IpV4,
                (ushort)allocation.RelayServer.Port,
                allocation.AllocationIdBytes,
                allocation.Key,
                allocation.ConnectionData
            );
            NetworkManager.Singleton.StartHost();
            OnRelayStarted?.Invoke(this, EventArgs.Empty);
            return joinCode;
        }
        catch (RelayServiceException e)
        {
            Debug.Log(e);
            return "0";
        }
    }

    /// <summary>
    /// Joins a relay through a code
    /// </summary>
    /// <param name="joinCode">The code generated by a CreateRelay function</param>
    public async void JoinRelay(string joinCode)
    {
        try
        {
            Debug.Log("Joining Relay with " + joinCode);
            JoinAllocation joinAllocation = await RelayService.Instance.JoinAllocationAsync(joinCode);
            NetworkManager.Singleton.GetComponent<UnityTransport>().SetClientRelayData(
                joinAllocation.RelayServer.IpV4,
                (ushort)joinAllocation.RelayServer.Port,
                joinAllocation.AllocationIdBytes,
                joinAllocation.Key,
                joinAllocation.ConnectionData,
                joinAllocation.HostConnectionData
            );
            NetworkManager.Singleton.StartClient();
            OnRelayStarted?.Invoke(this, EventArgs.Empty);
        }
        catch (RelayServiceException e)
        {
            Debug.Log(e);
        }
    }
}
